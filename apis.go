package meilisearch

// ApiWithIndexID Is used to await an async update id response.
// Each apis that use an index internally implement this interface except ApiUpdates.
type ApiWithIndexID interface {
	IndexId() string
	Client() *Client
}

// ApiIndexes, index is an entity, like a table in SQL, with a specific schema definition. It gathers a collection of documents
// with the structure defined by the schema.
// An index is defined by an unique identifier uid that is generated by MeiliSearch (if none is given) on index
// creation. It also has a name to help you track your different indexes.
//
// Documentation: https://docs.meilisearch.com/references/indexes.html
type ApiIndexes interface {

	// Get the index relative information.
	Get(uid string) (*Index, error)

	// List all indexes.
	List() ([]Index, error)

	// Create an index.
	// The schema definition is optionally send through the body. If no schema has been defined when the first document
	// is sent it will be inferred based on that document.
	// If no UID is specified in the request a randomly generated UID will be returned.
	// It's associated to the new index. This UID will be essential to make all request over the created index.
	Create(request CreateIndexRequest) (*CreateIndexResponse, error)

	// Update an index name.
	Update(uid string, name string) (*Index, error)

	// Delete an index.
	Delete(uid string) (bool, error)

	// GetRawSchema get the schema of one index using the RawSchema type.
	GetRawSchema(uid string) (*RawSchema, error)

	// GetSchema get the schema of one index using the Schema type.
	GetSchema(uid string) (*Schema, error)

	// UpdateSchema an index schema by using the Schema type.
	UpdateSchema(uid string, schema Schema) (*AsyncUpdateId, error)

	// UpdateWithRawSchema an index schema by using the RawSchema type.
	UpdateWithRawSchema(uid string, schema RawSchema) (*AsyncUpdateId, error)
}

// ApiDocuments are objects composed of fields containing any data.
//
// Documentation: https://docs.meilisearch.com/references/documents.html
type ApiDocuments interface {

	// Get one document using its unique identifier.
	// documentPtr should be a pointer.
	Get(identifier string, documentPtr interface{}) error

	// Delete one document based on its unique identifier.
	Delete(identifier string) (*AsyncUpdateId, error)

	// Delete a selection of documents based on array of identifiers.
	Deletes(identifier []string) (*AsyncUpdateId, error)

	// List the documents in an unordered way.
	// WARNING: this route is a non-optimized route, it can be a little bit slow to answer.
	List(request ListDocumentsRequest, documentsPtr interface{}) error

	// AddOrUpdate a list of documents, update them if they already exist based on their unique identifiers.
	AddOrUpdate(documentsPtr interface{}) (*AsyncUpdateId, error)

	// DeleteAllDocuments in the specified index.
	DeleteAllDocuments() (*AsyncUpdateId, error)

	ApiWithIndexID
}

// Search through documents list in an index.
//
// Documentation: https://docs.meilisearch.com/references/search.html
type ApiSearch interface {

	// Search for documents matching a specific query in the given index.
	Search(params SearchRequest) (*SearchResponse, error)

	ApiWithIndexID
}

type ApiSynonyms interface {
	List(word string) ([]string, error)
	ListAll() ([]ListSynonymsResponse, error)
	Create(word string, synonyms []string) (*AsyncUpdateId, error)
	Update(word string, synonyms []string) (*AsyncUpdateId, error)
	Delete(word string) (*AsyncUpdateId, error)
	BatchCreate(request BatchCreateSynonymsRequest) (*AsyncUpdateId, error)
	DeleteAll() (*AsyncUpdateId, error)

	ApiWithIndexID
}

// ApiStopWords, stop-words words allow you to ignore certain words in the relevance of your search.
//
// During a search, if your query contains words that you have put in stop-words, they will be ignored by the algorithm
// that defines the relevance of each document. This increases the speed of the search.
//
// Using stop-words allows the relevance of the search to be focused on more interesting elements such as ranking rather
// than on the accuracy of the sequence with another one.
//
// Documentation: https://docs.meilisearch.com/references/stop_words.html
type ApiStopWords interface {

	// List of the stop-words.
	List() ([]string, error)

	// Add stop-words to the list.
	Add(words []string) (*AsyncUpdateId, error)

	// Deletes a list of stop-words from the list.
	Deletes(words []string) (*AsyncUpdateId, error)

	ApiWithIndexID
}

// ApiUpdates, MeiliSearch is an asynchronous API. It means that the API does not behave as you would typically expect
// when handling the request's responses.
//
// Some actions are put in a queue and will be executed in turn (asynchronously). In this case, the server response
// contains the identifier to track the execution of the action.
//
// This API permit to get the state of an update id.
type ApiUpdates interface {

	// Get the status of an update in a given index.
	Get(id int64) (*Update, error)

	// Get the status of all updates in a given index.
	List() ([]Update, error)
}

// ApiKeys, To communicate with MeiliSearch's RESTfull API most of the routes require an API key.
type ApiKeys interface {

	// Get information for a given API key.
	Get(key string) (*APIKey, error)

	// Get all API keys information.
	List() ([]APIKey, error)

	// Create an API key.
	Create(request CreateApiKeyRequest) (*APIKey, error)

	// Update an API key.
	Update(key string, request UpdateApiKeyRequest) (*APIKey, error)

	// Delete an API key.
	Delete(key string) (deleted bool, err error)
}

type ApiSettings interface {
	Get() (*Settings, error)
	AddOrUpdate(request Settings) (*AsyncUpdateId, error)
}

type ApiStats interface {
	Get() (*Stats, error)
	List() ([]Stats, error)
}

type ApiHealth interface {
	Get() error
	Set(health bool) error
}

// ApiVersion retrieve the version of MeiliSearch.
type ApiVersion interface {

	// Get version of MeiliSearch.
	Get() (*Version, error)
}

type ApiSystemInformation interface {
	Get() (*SystemInformation, error)
	GetPretty() (*SystemInformationPretty, error)
}
